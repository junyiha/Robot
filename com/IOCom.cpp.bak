#include "IOCom.h"

IOCom::IOCom()
{
    m_SendSize = 13;
    m_RecvSize = 30;
    memset(m_DOSet, 0, 6);
    memset(m_DOState, 0, 6);
    memset(m_DIState, 0, 8);
    memset(m_AISate, 0, 8*sizeof(unsigned short));

    //com连接成功发送信号则打开loop，启动两个定时器；连接断开发送信号关闭loop。
    connect(this,&IOCom::sigConnected,this,&IOCom::slotStartLoop);
    connect(this,&IOCom::sigDisconnected,this,&IOCom::slotStopLoop);
    //定时器连接senddata函数
    m_cIOSendAndRecvTimer=new QTimer(this);
    //500测试，100使用
    m_cIOSendAndRecvTimer->setInterval(100);
    connect(m_cIOSendAndRecvTimer,&QTimer::timeout,this,&IOCom::SendIO);
    connect(m_cIOSendAndRecvTimer,&QTimer::timeout,this,&IOCom::RecvIO);

    g_RecvIOLock.clear();
    g_SendIOLock.clear();
}

IOCom::~IOCom()
{

}

void IOCom::slotStartLoop()
{
    m_cIOSendAndRecvTimer->start();
}

void IOCom::slotStopLoop()
{
    m_cIOSendAndRecvTimer->stop();
}

DINT IOCom::SendIO()
{
    if(m_CommState == true)
    {
        //qDebug()<<"IOcom: sendData current threadID:"<<GetCurrentThreadId();
        //锁定要发送的数据，并转移数据
        if (false == g_SendIOLock.test_and_set())
        {
            m_SendData[0] = m_SendSize; //长度
            m_SendData[1] = 48;			//DO数量
            m_SendData[2] = 8;			//DI数量
            m_SendData[3] = 0;			//AO数量
            m_SendData[4] = 8;			//AI数量
            m_SendData[5] = 1;			//硬件类型
            memcpy(&m_SendData[6], m_DOSet, 6);

            m_SendData[12] = 0;
            for (int i = 0; i < 12; i++)//数据校验
            {
                m_SendData[12] = m_SendData[12] + m_SendData[i];
            }

            //完成输出转移和清空，解除锁定
            g_SendIOLock.clear();
        }
        else
        {
            //写入数据失败，重试
            printf("failed to write，try again！\n");
            return -2;
        }
        //*********************************************************************************************************************

        //发送数据
        int re = Sendbuffer();
        if (0 == re)
        {
            return 0;
        }
        else
        {
            printf("failed to send\n");
            return -1;
        }
    }
    else return -10;
}

DINT IOCom::RecvIO()
{
    if(m_CommState == true)
    {
        qDebug()<<"IOcom: recvData current threadID:"<<GetCurrentThreadId();
        DINT re = Recvbuffer();
        if (0 != re)
        {
            printf("failed to recv\n");
            return -1;
        }
        //*******************************************************************************************************************
        //锁定变量，写入接收数据
        if (false == g_RecvIOLock.test_and_set())
        {
            if (m_RecvData[0] != 30 || m_RecvData[1] != 48 || m_RecvData[2] != 8 || m_RecvData[4] != 8)
            {
                g_RecvIOLock.clear();
                return -1; //数据非法
            }
            byte temp = 0;
            for (int i = 0; i < 28; i++)//数据校验
            {
                temp = temp + m_RecvData[i];
            }
            if (temp!= m_RecvData[29])
            {
                g_RecvIOLock.clear();
                return -1; //数据非法
            }
            memcpy(m_DOState, &m_RecvData[6], 6);
            memcpy(m_DIState, &m_RecvData[12], 1);
            memcpy(m_AISate, &m_RecvData[13], 16);

            g_RecvIOLock.clear();
        }
        else
        {
            //写入失败，直接丢弃数据
            ;
        }
        //发送数据更新信号
        emit sigIODataUpdate();
        return 0;
    }
    else
    {
        emit sigIODataUpdate();
        return -10;
    }
}

bool IOCom::slotSetIO(byte value[])
{
    if (false == g_SendIOLock.test_and_set())
    {
        memcpy(this->m_DOSet, value, 6);
        g_SendIOLock.clear();
        return true;
    }
    else
    {
        return false;
    }

}

//保留，暂时未连接信号
bool IOCom::ReadIO(byte value[])
{
    if (false == g_RecvIOLock.test_and_set())
    {
        memcpy(value, this->m_DOState, 6);
        memcpy(value+6, this->m_DIState, 1);
        memcpy(value+6+1, this->m_AISate, 8 * sizeof(unsigned short));
        return true;
    }
    else
    {
        return false;
    }
    g_RecvIOLock.clear();
}
